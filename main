import pygame
from pygame.locals import *
import random


pygame.init()

clock = pygame.time.Clock()
# Create Window Variables
WINDOW_WIDTH = 864
WINDOW_HEIGHT = 936
MIDDLE_WIDTH = WINDOW_WIDTH // 2
MIDDLE_HEIGHT = WINDOW_HEIGHT // 2

# Create Window
window = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
pygame.display.set_caption('Flappy Bird')

# Create Game Variables
ground_coordinate = 0
scroll = 4
FPS = 60
is_flying = False
game_over = False
gravity = 10
pipe_gap = 75
time_since_last_pipe = 1500
pipe_variety = 100
last_pipe = pygame.time.get_ticks() - time_since_last_pipe
score = 0
high_score = 0
pass_pipe = False
WHITE = (255, 255, 255)
font = pygame.font.SysFont('arial', 60)
sound_played = False

# Load Images
background = pygame.image.load('img/bg.png')
ground = pygame.image.load('img/ground.png')
restart_button_img = pygame.image.load('img/restart.png')
antigravity_button_img = pygame.transform.rotate(pygame.image.load('img/antigravity.png'), 180)
normal_button_img = pygame.image.load('img/normal.png')
easy_button_img = pygame.image.load('img/easy.png')
hard_button_img = pygame.image.load('img/hard.png')

# load sounds
die_sound = pygame.mixer.Sound('img/die.wav')
hit_sound = pygame.mixer.Sound('img/hit.wav')
point_sound = pygame.mixer.Sound('img/point.wav')
swoosh_sound = pygame.mixer.Sound('img/swoosh.wav')
wing_sound = pygame.mixer.Sound('img/wing.wav')


def draw_score(score, font, x, y):
    img = font.render(score, True, WHITE)
    window.blit(img, (x, y))


def draw_background(window, background):
    window.blit(background, (0, 0))


def draw_ground(window, ground):
    window.blit(ground, (ground_coordinate, 768))


class Bird(pygame.sprite.Sprite):
    def __init__(self, x, y, antigravity=False):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load('img/bird1.png')

        self.rect = self.image.get_rect()
        self.rect.center = [x, y]
        self.vel = 0
        self.antigravity = antigravity

    def update(self):
        if is_flying:
            # gravity
            self.vel += 0.5
            if self.vel > 10:
                self.vel = 10
            if self.antigravity is False:
                self.rect.y += int(self.vel)
            elif self.antigravity is True:
                self.rect.y -= int(self.vel)

            if self.rect.bottom == 768:
                self.rect.bottom = 768

        if game_over is True and self.rect.bottom <= 768:
            self.vel = 20
            self.image = pygame.transform.rotate(self.image, -90)
            if self.antigravity is False:
                self.rect.y += self.vel
            elif self.antigravity is True:
                self.rect.y -= self.vel

    def jump(self):
        self.vel = -8
        wing_sound.play()

class Pipe(pygame.sprite.Sprite):
    def __init__(self, x, y, position):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load('img/pipe.png')
        self.rect = self.image.get_rect()
        if position == 'top':
            self.image = pygame.transform.flip(self.image, False, True)
            self.rect.bottomleft = [x, y - pipe_gap]
        if position == 'bottom':
            self.rect.topleft = [x, y + pipe_gap]

    def update(self):
        self.rect.x -= scroll
        if self.rect.right < 0:
            self.kill()


def create_pipe():
    pipe_height = random.randint(-pipe_variety, pipe_variety)
    bottom_pipe = Pipe(WINDOW_WIDTH, WINDOW_HEIGHT // 2 + pipe_height, 'bottom')
    top_pipe = Pipe(WINDOW_WIDTH, WINDOW_HEIGHT // 2 + pipe_height, 'top')
    pipe_group.add(bottom_pipe)
    pipe_group.add(top_pipe)


class Button:
    def __init__(self, x, y, image):
        self.image = image
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)

    def draw(self):
        button_clicked = False
        mouse_position = pygame.mouse.get_pos()
        if self.rect.collidepoint(mouse_position):
            if pygame.mouse.get_pressed()[0] == 1:
                button_clicked = True

        window.blit(self.image, (self.rect.x, self.rect.y))
        return button_clicked

# Define when a game is reset
def reset():
    global score
    global game_over
    global sound_played
    pipe_group.empty()
    flappy.rect.x, flappy.rect.y = 100, 500
    flappy.image = pygame.image.load('img/bird1.png')
    score = 0
    game_over = False
    sound_played = False




# Create pipe and bird groups
bird_group = pygame.sprite.Group()
pipe_group = pygame.sprite.Group()

# Create Instance of Bird Object
flappy = Bird(100, MIDDLE_WIDTH)

bird_group.add(flappy)

# Create Button Objects from Button Class
restart_button = Button(MIDDLE_WIDTH, MIDDLE_HEIGHT, restart_button_img)
antigravity_button = Button(75, 820, antigravity_button_img)
normal_button = Button(75, 820, normal_button_img)
hard_button = Button(800, 820, hard_button_img)
easy_button = Button(700, 820, easy_button_img)



if __name__ == '__main__':
    run = True
    while run is True:

        clock.tick(60)

        pipe_group.draw(window)

        if len(pipe_group) > 0:
            if flappy.rect.left > pipe_group.sprites()[0].rect.left\
                and flappy.rect.right < pipe_group.sprites()[0].rect.right\
                and pass_pipe is False:
                pass_pipe = True

            if pass_pipe is True:
                if flappy.rect.left > pipe_group.sprites()[0].rect.right:
                    score += 1
                    pass_pipe = False
                    high_score = max(score, high_score)
                    point_sound.play()

        # draw background
        draw_background(window, background)

        pipe_group.draw(window)
        bird_group.draw(window)
        bird_group.update()

        # animate ground
        draw_ground(window, ground)
        if is_flying:
            ground_coordinate -= scroll
            if ground_coordinate == -36:
                ground_coordinate = 0

            current_time = pygame.time.get_ticks()
            if current_time - last_pipe > time_since_last_pipe:
                create_pipe()
                last_pipe = current_time

            pipe_group.update()

        if pygame.sprite.groupcollide(bird_group, pipe_group, False, False) or flappy.rect.top < 0:
            game_over = True
            is_flying = False
            if sound_played is False:
                hit_sound.play()
                die_sound.play()
                sound_played = True


        # check if bird is on ground
        if flappy.rect.bottom >= 768:
            game_over = True
            is_flying = False
            if sound_played is False:
                die_sound.play()
                sound_played = True

        if game_over:
            if restart_button.draw() is True:
                reset()



        if is_flying is False and game_over is True:
            if flappy.antigravity is False:
                if antigravity_button.draw() is True:
                    flappy.antigravity = True
                    reset()
                    high_score = 0

            elif flappy.antigravity is True:
                if normal_button.draw() is True:
                    flappy.antigravity = False
                    reset()
                    high_score = 0

            if time_since_last_pipe > 750:
                if hard_button.draw() is True:
                    high_score = 0
                    time_since_last_pipe -= 250
                    reset()

            if time_since_last_pipe <= 1500:
                if easy_button.draw() is True:
                    high_score = 0
                    time_since_last_pipe += 250
                    reset()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
            if event.type == pygame.KEYDOWN:
                if event.key == K_ESCAPE:
                    run = False
                if event.key == K_SPACE:
                    if is_flying is False and game_over is False:
                        is_flying = True
                    if is_flying and game_over is False:
                        flappy.jump()

        draw_score(f'Current Score: {str(score)}', font, 455, 10)
        draw_score(f'High Score: {str(high_score)}', font, 10, 10)

        pygame.display.update()
    pygame.quit()

